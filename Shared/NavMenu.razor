 
<nav class="navbar navbar-expand-lg navbar-theme bg-light fixed-top  ">
     <span class="topline"></span>

    <div class="container-fluid  ms-5 me-5  overflow-auto   p-2">
        <button class="navbar-toggler " type="button" @onclick="@ToggleNavMenu">
            <span class="navbar-toggler-icon  "></span>
        </button>
        <div class="@NavMenuCssClass navbar-collapse   " @onclick="@ToggleNavMenu">
            <ul class="navbar-nav me-auto mb-2 mt-2  mb-lg-0" role="list" id="navigation" aria-labelledby="navigation">
                @foreach (var item in CVModel.CV.ListOfTabs.Where(x => x.IsSelected))
                {
                    <li class="nav-item">
                        <button type="submit" style="white-space: nowrap;" @onclick="() => SetTab(item)" class='btn-outline-info mt-2 m-1 btn @(UiUpdate.SelectedTab == item.Tab ? "active" : "")'>@item.TabName</button>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>
@code {
    bool collapseNavMenu = true;
    string NavMenuCssClass => collapseNavMenu ? "collapse" : string.Empty;
    void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;
    protected override void OnInitialized() => UiUpdate.OnChange += StateHasChanged;
    void SetTab(TabsModel item) => (UiUpdate.SelectedTab, UiUpdate.SelectedTabIndex) =
        (CVModel.CV.IsValid() && !CRUD.IsInEditState) || (UiUpdate.SelectedTab is Tabs.Personal && item.Tab is Tabs.HomePage) ?
            (item!.Tab, CVModel.CV.ListOfTabs.Where(x => x.IsSelected).ToList().IndexOf(item)) :
            (UiUpdate.SelectedTab, UiUpdate.SelectedTabIndex);
}