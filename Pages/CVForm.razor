@page "/"
<div class="container">
    <div class="row">
        <EditForm EditContext="editContext" OnValidSubmit="Move">
            <FluentValidationValidator />
            @if (CVModel.ListOfTabs.Any(x => x.Tab == UiUpdate.SelectedTab && x.IsSelected))
            {
                @if (UiUpdate.SelectedTab is not Tabs.HomePage)
                {
                    <br />
                    <br />
                    <br />
                    <br />
                    <br />
                    <NavMenu />
                }
                @if (UiUpdate.SelectedTab is Tabs.HomePage)
                {
                    <CVForm_HomePage />
                }
                @if (UiUpdate.SelectedTab is Tabs.Personal)
                {
                    <CVForm_Personal />
                }
                @if (UiUpdate.SelectedTab is Tabs.Education)
                {
                    <CVForm_Education />
                }
                @if (UiUpdate.SelectedTab is Tabs.WorkExprince)
                {
                    <CVForm_WorkExperience />
                }
                @if (UiUpdate.SelectedTab is Tabs.OtherWorkExprince)
                {
                    <CVForm_OtherWorkExperience />
                }
                @if (UiUpdate.SelectedTab is Tabs.Certifications)
                {
                    <CVForm_Certification />
                }
                @if (UiUpdate.SelectedTab is Tabs.ProfessionalAffeilations)
                {
                    <CVForm_Professional_Affeilations />
                }
                @if (UiUpdate.SelectedTab is Tabs.Refernces)
                {
                    <CVForm_Reference />
                }
                @if (UiUpdate.SelectedTab is Tabs.CV)
                {
                    <CVDownloader />
                }
                <br />
                @if (UiUpdate.SelectedTab is not Tabs.HomePage and not Tabs.Personal)
                {
                    <button @onclick="()=> goNext = false" type="submit" class="btn btn-outline-info">&lt; Back</button>
                }
                @if (UiUpdate.SelectedTab is Tabs.Personal)
                {
                    <button @onclick="()=> {goNext = false; Move();}" type="button" class="btn btn-outline-info">&lt; Back</button>
                }
                @if (UiUpdate.SelectedTab is not Tabs.CV and not Tabs.HomePage)
                {
                    <button @onclick="()=> goNext = true" type="submit" style="margin: 9px" class="btn btn-outline-info">Next &gt;</button>
                    <CVPreview>
                        <Index />
                    </CVPreview>
                }
                @if (UiUpdate.SelectedTab is Tabs.HomePage)
                {
                    <button @onclick="()=> {goNext = true; Move();}" type="button" style="margin: 9px" class="btn btn-outline-info">Lets Go!</button>
                }
            }
        </EditForm>
    </div>
</div>
@code {
    private EditContext? editContext = default!;
    bool? goNext = null;
    protected override void OnInitialized()
    {
        UiUpdate.OnChange += StateHasChanged;
        editContext ??= new(CVModel.CV);
        editContext?.SetFieldCssClassProvider(new CustomFieldClassProvider());
    }
    void Next() => UiUpdate.SelectedTab = CVModel.ListOfTabs.Where(x => x.IsSelected).ToList()[++UiUpdate.SelectedTabIndex].Tab;
    void Back() => UiUpdate.SelectedTab = CVModel.ListOfTabs.Where(x => x.IsSelected).ToList()[--UiUpdate.SelectedTabIndex].Tab;
    void Move()
    {
        if (CRUD.IsInEditState) return;
        if (goNext ?? false) Next();
        else if (!goNext ?? false) Back();
        goNext = null;
        UiUpdate.NotifyStateChanged();
    }
}